<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- SecurityManager 配置-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--缓存管理 TODO 缓存名字配置作用？？？-->
        <property name="cacheManager" ref="cacheManager"/>
        <!--TODO 认证策略配置，必须在 realms 属性之前-->
        <property name="authenticator" ref="authenticator"/>
        <!--单 realm 配置-->
        <!--<property name="realm" ref="firstRealm"/>-->
        <!--多realms配置；也可以配置在 authenticator 中，但效率低（会有一步判断设置给 realm）-->
        <property name="realms">
            <list>
                <ref bean="shiroRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
        <!--记住我缓存管理器-->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!--记住我缓存时间设置-->
    <bean class="org.apache.shiro.web.mgt.CookieRememberMeManager" id="rememberMeManager">
        <property name="cookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <!--缓存时间设置，单位：秒-->
                <property name="maxAge" value="10"/>
            </bean>
        </property>
    </bean>



    <!--认证策略配置-->
    <bean class="org.apache.shiro.authc.pam.ModularRealmAuthenticator" id="authenticator">
        <property name="authenticationStrategy">
            <!--AtLeastOneSuccessfulStrategy 为默认认证策略-->
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!-- 缓存配置 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!--使用 ehcache.xml -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--自定义 Realm -->
    <bean class="cn.cxy.realms.SecondRealm" id="secondRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--加密算法配置-->
                <property name="hashAlgorithmName" value="SHA1"/>
                <!--加密次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>
    <bean class="cn.cxy.realms.ShiroRealm" id="shiroRealm">
        <!--自定义加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--加密算法配置-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!--加密次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>


    <!--shiro 生命周期管理-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--shiro 注解配置，仅在 lifecycleBeanProcessor 配置后生效-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>


    <!--TODO-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--核心过滤器链：id 属性必须与 web.xml 中 DelegatingFilterProxy 的 <filter-name> 名称相同 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--TODO 登录：在未登录情况下，所有的请求都将被拦截到此 URL，GET 请求-->
        <property name="loginUrl" value="/login.jsp"/>
        <!--可以不配置-->
        <property name="successUrl" value="/list.jsp"/>
        <!--未授权-->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->

        <!--
            格式：URL = 拦截器[参数]
            URL 权限采取第一次匹配优先的原则
            URL 匹配模式采用 Ant 风格：
                TODO 支持 ?、*、** ，不包括目录分隔符
                - ? 匹配一个字符
                - * 匹配零个或多个字符串
                - ** 匹配路径中的另个或多个路径
        -->
        <!--<property name="filterChainDefinitions">
            <value>
                /admin.jsp=authc,roles[admin]
                /user.jsp=authc,roles[user]
                /add.jsp=authc,roles[user,guest]
                /guest.jsp=authc,roles[guest]
                /shiro/login=anon
                /shiro/logout=logout
                /**=authc
            </value>
        </property>-->
        <!--TODO 优化filterChainDefinitions配置：通过工厂方法动态获取数据库中配置的权限信息-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
    </bean>

    <!--配置工厂类与工厂方法-->
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="filterChainDefinitionMapBuilder"/>

</beans>